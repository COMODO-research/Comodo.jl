var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/#loflinear","page":"Functions","title":"loflinear","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Comodo.loftlinear","category":"page"},{"location":"functions/#Comodo.loftlinear","page":"Functions","title":"Comodo.loftlinear","text":"loftlinear(V1,V2;num_steps=2,close_loop=true,face_type=:tri)\n\nLoft a surface mesh between two input curves\n\nDescription\n\nThe loftlinear function spans a surface from input curve V1 to curve V2.  The surface is formed by \"lerping\" curves form V1 to V2 in num_loft  steps, and forming mesh faces between each curve. If close_loop==true then it is assumed the curves and surface should be closed over. The user  can request different face types for the output. The default is  face_type=:tri which will form isoceles triangles (or equilateral  triangles if the spacing is even) for a planar curve. The other face_type options supported are :quad (quadrilateral), and :tri_slash. For the  latter, triangles are formed by slashing the quads.  \n\nArguments:\n\nV1::Vector: n-vector \nV2::Vector: n-vector\n\n\n\n\n\n","category":"function"},{"location":"functions/#ray*triangle*intersect","page":"Functions","title":"raytriangleintersect","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Comodo.ray_triangle_intersect","category":"page"},{"location":"functions/#Comodo.ray_triangle_intersect","page":"Functions","title":"Comodo.ray_triangle_intersect","text":"ray_triangle_intersect(f::TriangleFace{Int64},V,ray_origin,ray_vector; rayType = :ray, triSide = 1, tolEps = eps(Float64))\n\nImplementation of the Möller-Trumbore triangle-ray intersection algorithm.\n\nReferences\n\nMöller, Tomas; Trumbore, Ben (1997). \"Fast, Minimum Storage Ray-Triangle Intersection\". Journal of Graphics Tools. 2: 21-28. doi:10.1080/10867651.1997.10487468. \n\n\n\n\n\n","category":"function"},{"location":"functions/#mesh*curvature*polynomial","page":"Functions","title":"meshcurvaturepolynomial","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Comodo.mesh_curvature_polynomial","category":"page"},{"location":"functions/#Comodo.mesh_curvature_polynomial","page":"Functions","title":"Comodo.mesh_curvature_polynomial","text":"mesh_curvature_polynomial(F,V)\n\nNotes\n\nImplemented with the aid of: \nhttps://github.com/alecjacobson/geometry-processing-curvature/blob/master/README.md\n\nReferences\n\nF. Cazals and M. Pouget, \"Estimating differential quantities using polynomial \nfitting of osculating jets\", Computer Aided Geometric Design, vol. 22, no. 2, \npp. 121-146, Feb. 2005, doi: 10.1016/j.cagd.2004.09.004.\n\n\n\n\n\n","category":"function"},{"location":"functions/#smoothmesh_hc","page":"Functions","title":"smoothmesh_hc","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Comodo.smoothmesh_hc","category":"page"},{"location":"functions/#Comodo.smoothmesh_hc","page":"Functions","title":"Comodo.smoothmesh_hc","text":"smoothmesh_hc(F,V, con_V2V=missing; n=1, α=0.1, β=0.5, tolDist=missing)\n\nDescription\n\nThis function implements HC (Humphrey's Classes) smoothing. This method uses\nLaplacian like smoothing but aims to compensate for the shrinkage/swelling \nseen with pure Laplacian smoothing.\n\nReferences\n\nVollmer et al. Improved Laplacian Smoothing of Noisy Surface Meshes, 1999\nhttps://doi.org/10.1111/1467-8659.00334\n\n\n\n\n\n","category":"function"},{"location":"functions/#smoothmesh_laplacian","page":"Functions","title":"smoothmesh_laplacian","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Comodo.smoothmesh_laplacian","category":"page"},{"location":"functions/#Comodo.smoothmesh_laplacian","page":"Functions","title":"Comodo.smoothmesh_laplacian","text":"smoothmesh_laplacian(F,V,con_V2V=missing; n=1, λ=0.5)\n\nDescription\n\nThis function implements Weighted Laplacian mesh smoothing. At each \niteration, this method replaces each point by the weighted sum of the \nLaplacian mean for the point and the point itself. The weighting is \ncontrolled by the parameter λ which is in the range (0,1). If λ=0 no \nsmoothing occurs. If λ=0 pure Laplacian mean based smoothing occurs. For \nintermediate values a linear blending between the two occurs.\n\n\n\n\n\n","category":"function"},{"location":"functions/#platonicsolid","page":"Functions","title":"platonicsolid","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Comodo.platonicsolid","category":"page"},{"location":"functions/#Comodo.platonicsolid","page":"Functions","title":"Comodo.platonicsolid","text":"platonicsolid(n,r=1.0)\n\nCreates mesh data for a platonic solid of choice\n\n\n\n\n\n","category":"function"},{"location":"functions/#sub2ind","page":"Functions","title":"sub2ind","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Comodo.sub2ind","category":"page"},{"location":"functions/#Comodo.sub2ind","page":"Functions","title":"Comodo.sub2ind","text":"sub2ind(siz,A)\n\nConverts the subscript indices in `A`, for a matrix/array with size `siz`, to the equivalent linear indices.\n\n\n\n\n\n","category":"function"},{"location":"functions/#ind2sub","page":"Functions","title":"ind2sub","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Comodo.ind2sub","category":"page"},{"location":"functions/#Comodo.ind2sub","page":"Functions","title":"Comodo.ind2sub","text":"ind2sub(siz,ind)\n\nConverts the linear indices in `ind`, for a matrix/array with size `siz`, to the equivalent subscript indices.\n\n\n\n\n\n","category":"function"},{"location":"#Comodo.jl","page":"Comodo.jl","title":"Comodo.jl","text":"","category":"section"},{"location":"","page":"Comodo.jl","title":"Comodo.jl","text":"___________________","category":"page"},{"location":"","page":"Comodo.jl","title":"Comodo.jl","text":"Functions","category":"page"}]
}
